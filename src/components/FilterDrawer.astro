---
import { getAvailableFilters } from '../utils/api';
import type { Filters } from '../utils/api';

const filters: Filters = await getAvailableFilters();
---

<div id="filter-drawer" class="fixed inset-y-0 right-0 w-80 bg-white shadow-lg transform translate-x-full transition-transform duration-300 ease-in-out z-50">
    <div class="p-4">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-lg font-semibold">Filters</h2>
            <button id="close-drawer" class="text-gray-500 hover:text-gray-700">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>

        <div class="space-y-6">
            <!-- Actors Filter -->
            <div>
                <h3 class="text-sm font-medium text-gray-700 mb-2">Actors</h3>
                <select id="actor-filter" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                    <option value="">All Actors</option>
                    {filters.actors.map((actor: string) => (
                        <option value={actor}>{actor}</option>
                    ))}
                </select>
            </div>

            <!-- Tags Filter -->
            <div>
                <h3 class="text-sm font-medium text-gray-700 mb-2">Tags</h3>
                <select id="tag-filter" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                    <option value="">All Tags</option>
                    {filters.tags.map((tag: string) => (
                        <option value={tag}>{tag}</option>
                    ))}
                </select>
            </div>

            <!-- Years Filter -->
            <div>
                <h3 class="text-sm font-medium text-gray-700 mb-2">Years</h3>
                <select id="year-filter" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                    <option value="">All Years</option>
                    {filters.years.map((year: string) => (
                        <option value={year}>{year}</option>
                    ))}
                </select>
            </div>

            <!-- Apply Filters Button -->
            <button id="apply-filters" class="w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors">
                Apply Filters
            </button>

            <!-- Clear Filters Button -->
            <button id="clear-filters" class="w-full bg-gray-200 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-300 transition-colors">
                Clear Filters
            </button>
        </div>
    </div>
</div>

<script>
    class FilterDrawer {
        private drawer: HTMLElement | null = null;
        private closeButton: HTMLElement | null = null;
        private applyButton: HTMLElement | null = null;
        private clearButton: HTMLElement | null = null;
        private actorSelect: HTMLSelectElement | null = null;
        private tagSelect: HTMLSelectElement | null = null;
        private yearSelect: HTMLSelectElement | null = null;

        constructor() {
            this.initializeElements();
            this.setupEventListeners();
            this.exposeOpenDrawer();
        }

        private initializeElements(): void {
            this.drawer = document.getElementById('filter-drawer');
            this.closeButton = document.getElementById('close-drawer');
            this.applyButton = document.getElementById('apply-filters');
            this.clearButton = document.getElementById('clear-filters');
            this.actorSelect = document.getElementById('actor-filter') as HTMLSelectElement;
            this.tagSelect = document.getElementById('tag-filter') as HTMLSelectElement;
            this.yearSelect = document.getElementById('year-filter') as HTMLSelectElement;
        }

        private setupEventListeners(): void {
            this.closeButton?.addEventListener('click', () => this.closeDrawer());
            this.applyButton?.addEventListener('click', () => this.applyFilters());
            this.clearButton?.addEventListener('click', () => this.clearFilters());

            // Initialize with current filter state
            const currentFilter = window.imageManager.getCurrentFilter();
            if (this.actorSelect && currentFilter.actor) this.actorSelect.value = currentFilter.actor;
            if (this.tagSelect && currentFilter.tag) this.tagSelect.value = currentFilter.tag;
            if (this.yearSelect && currentFilter.year) this.yearSelect.value = currentFilter.year;
        }

        private applyFilters(): void {
            const filter = {
                actor: this.actorSelect?.value || undefined,
                tag: this.tagSelect?.value || undefined,
                year: this.yearSelect?.value || undefined
            };

            window.imageManager.setFilter(filter);
            this.closeDrawer();
            
            // Trigger a reload of the gallery
            window.dispatchEvent(new CustomEvent('filtersChanged'));
        }

        private clearFilters(): void {
            window.imageManager.clearFilter();
            if (this.actorSelect) this.actorSelect.value = '';
            if (this.tagSelect) this.tagSelect.value = '';
            if (this.yearSelect) this.yearSelect.value = '';
            this.closeDrawer();
            
            // Trigger a reload of the gallery
            window.dispatchEvent(new CustomEvent('filtersChanged'));
        }

        private closeDrawer(): void {
            this.drawer?.classList.add('translate-x-full');
        }

        private openDrawer(): void {
            this.drawer?.classList.remove('translate-x-full');
        }

        private exposeOpenDrawer(): void {
            if (typeof window !== 'undefined') {
                window.openDrawer = this.openDrawer.bind(this);
            }
        }
    }

    // Initialize the drawer when the DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        new FilterDrawer();
    });
</script> 