---
interface Props {
    imageId: string;
}

const { imageId } = Astro.props;
---

<div id="caption-modal" class="fixed inset-0 bg-black/90 hidden z-[60] flex items-center justify-center">
    <div class="bg-gray-900 rounded-lg p-6 w-full max-w-2xl mx-4">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-semibold text-white">Image Caption</h2>
            <button id="close-caption-modal" class="text-gray-400 hover:text-white">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <div class="space-y-4">
            <textarea id="caption-text" class="w-full h-32 bg-gray-800 text-white rounded-lg p-3 resize-none focus:ring-2 focus:ring-blue-500 focus:outline-none" placeholder="Enter caption..."></textarea>
            <div class="flex gap-3">
                <button id="generate-caption" class="px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded-lg text-sm font-medium transition-colors">
                    Generate Caption
                </button>
                <button id="save-caption" class="px-4 py-2 bg-green-600 hover:bg-green-700 rounded-lg text-sm font-medium transition-colors">
                    Save Caption
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    import { getImageCaption, saveImageCaption, generateImageCaption } from '../utils/api';

    let captionModal: HTMLElement | null = null;
    let captionText: HTMLTextAreaElement | null = null;
    let generateCaptionBtn: HTMLElement | null = null;
    let saveCaptionBtn: HTMLElement | null = null;
    let closeCaptionModalBtn: HTMLElement | null = null;
    let currentImageId: string | null = null;

    function updateCaptionStatus(hasCaption: boolean) {
        const statusDot = document.querySelector('#caption-status .w-2');
        const statusText = document.querySelector('#caption-status span:last-child');
        if (statusDot && statusText) {
            statusDot.className = `w-2 h-2 rounded-full ${hasCaption ? 'bg-green-500' : 'bg-red-500'}`;
            statusText.textContent = hasCaption ? 'Has Caption' : 'No Caption';
        }
    }

    async function loadCaption() {
        if (!currentImageId || !captionText) return;
        try {
            const caption = await getImageCaption(currentImageId);
            captionText.value = caption;
            updateCaptionStatus(caption.length > 0);
        } catch (error) {
            console.error('Error loading caption:', error);
            updateCaptionStatus(false);
        }
    }

    async function handleGenerateCaption() {
        if (!currentImageId || !captionText) return;
        try {
            const generatedCaption = await generateImageCaption(currentImageId);
            captionText.value = generatedCaption;
        } catch (error) {
            console.error('Error generating caption:', error);
        }
    }

    async function handleSaveCaption() {
        if (!currentImageId || !captionText) return;
        try {
            await saveImageCaption(currentImageId, captionText.value);
            updateCaptionStatus(captionText.value.length > 0);
            
            // Update the data attributes on the image element
            const imageElement = document.querySelector(`img[data-id="${currentImageId}"]`);
            if (imageElement) {
                imageElement.setAttribute('data-has-caption', captionText.value.length > 0 ? 'true' : 'false');
            }
            
            captionModal?.classList.add('hidden');
        } catch (error) {
            console.error('Error saving caption:', error);
        }
    }

    // Initialize modal elements
    document.addEventListener('DOMContentLoaded', () => {
        captionModal = document.getElementById('caption-modal');
        captionText = document.getElementById('caption-text') as HTMLTextAreaElement;
        generateCaptionBtn = document.getElementById('generate-caption');
        saveCaptionBtn = document.getElementById('save-caption');
        closeCaptionModalBtn = document.getElementById('close-caption-modal');

        // Close caption modal button handler
        closeCaptionModalBtn?.addEventListener('click', () => {
            captionModal?.classList.add('hidden');
        });

        // Generate caption button handler
        generateCaptionBtn?.addEventListener('click', handleGenerateCaption);

        // Save caption button handler
        saveCaptionBtn?.addEventListener('click', handleSaveCaption);

        // Add keyboard event handler for escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && captionModal && !captionModal.classList.contains('hidden')) {
                captionModal.classList.add('hidden');
            }
        });
    });

    // Make functions available globally
    (window as any).openCaptionModal = (imageId: string) => {
        currentImageId = imageId;
        captionModal?.classList.remove('hidden');
        // Clear the textarea before loading new caption
        if (captionText) {
            captionText.value = '';
        }
        loadCaption();
    };
</script> 