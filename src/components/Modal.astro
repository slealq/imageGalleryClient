---
interface Props {
    imageUrl: string;
}

const { imageUrl } = Astro.props;
---

<div id="modal" class="fixed inset-0 bg-black/90 hidden z-50 flex items-center justify-center">
    <div class="relative w-full h-full flex flex-col">
        <div class="flex-1 flex items-center justify-center p-4 pb-20">
            <img id="modal-image" src="" alt="" class="max-w-[95vw] max-h-[95vh] w-auto h-auto object-contain" />
        </div>
        <div id="modal-footer" class="absolute bottom-0 left-0 right-0 bg-black/50 backdrop-blur-sm p-4 text-white text-sm">
            <div class="container mx-auto flex justify-between items-center">
                <div id="modal-filename" class="font-medium"></div>
                <div class="flex gap-4">
                    <div id="modal-size" class="text-gray-300"></div>
                    <div id="modal-date" class="text-gray-300"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let modal: HTMLElement | null = null;
    let modalImage: HTMLImageElement | null = null;
    let modalFilename: HTMLElement | null = null;
    let modalSize: HTMLElement | null = null;
    let modalDate: HTMLElement | null = null;

    function formatFileSize(bytes: number): string {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function formatDate(dateString: string): string {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    function openModal(imageUrl: string, filename: string, size: string, created: string) {
        if (!modal || !modalImage || !modalFilename || !modalSize || !modalDate) return;
        
        modalImage.src = imageUrl;
        modalFilename.textContent = filename;
        modalSize.textContent = formatFileSize(parseInt(size));
        modalDate.textContent = formatDate(created);
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
    }

    function closeModal() {
        if (!modal) return;
        modal.classList.add('hidden');
        document.body.style.overflow = '';
    }

    // Initialize modal elements
    document.addEventListener('DOMContentLoaded', () => {
        modal = document.getElementById('modal');
        modalImage = document.getElementById('modal-image') as HTMLImageElement;
        modalFilename = document.getElementById('modal-filename');
        modalSize = document.getElementById('modal-size');
        modalDate = document.getElementById('modal-date');

        // Close modal when clicking outside the image
        modal?.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal();
            }
        });

        // Close modal when pressing Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeModal();
            }
        });
    });

    // Make openModal available globally
    (window as any).openModal = openModal;
</script> 