---
import CaptionModal from './CaptionModal.astro';

interface Props {
    imageUrl?: string;
}

const { imageUrl } = Astro.props;
---

<div id="modal" class="fixed inset-0 bg-black/90 hidden z-50 flex items-center justify-center">
    <div class="relative w-full h-full flex flex-col">
        <div id="modal-background" class="flex-1 flex items-center justify-center p-4 pb-20">
            <img id="modal-image" src="" alt="" class="max-w-[95vw] max-h-[95vh] w-auto h-auto object-contain" />
        </div>
        <div id="modal-footer" class="absolute bottom-0 left-0 right-0 bg-black/50 backdrop-blur-sm p-4 text-white text-sm">
            <div class="container mx-auto">
                <div class="flex justify-between items-center mb-2">
                    <div id="modal-filename" class="font-medium"></div>
                    <div class="flex gap-4">
                        <div id="modal-size" class="text-gray-300"></div>
                        <div id="modal-date" class="text-gray-300"></div>
                    </div>
                </div>
                <div class="flex items-center gap-4">
                    <div id="caption-status" class="flex items-center gap-2">
                        <span class="w-2 h-2 rounded-full"></span>
                        <span class="text-sm">Caption Status</span>
                    </div>
                    <button id="caption-button" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-sm font-medium transition-colors">
                        Manage Caption
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<CaptionModal imageId="" />

<script>
    let modal: HTMLElement | null = null;
    let modalImage: HTMLImageElement | null = null;
    let modalFilename: HTMLElement | null = null;
    let modalSize: HTMLElement | null = null;
    let modalDate: HTMLElement | null = null;
    let captionButton: HTMLElement | null = null;
    let imageElements: HTMLImageElement[] = [];
    let currentImageIndex = -1;
    let isLoadingMore = false;
    let currentImageId: string | null = null;

    function formatFileSize(bytes: number): string {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function formatDate(dateString: string): string {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    async function navigateImage(direction: 'next' | 'prev') {
        if (currentImageIndex === -1) return;
        
        let newIndex = direction === 'next' 
            ? Math.min(currentImageIndex + 1, imageElements.length - 1)
            : Math.max(currentImageIndex - 1, 0);
            
        if (newIndex !== currentImageIndex) {
            currentImageIndex = newIndex;
            const img = imageElements[currentImageIndex];
            const imageUrl = img.src;
            const filename = img.getAttribute('data-filename');
            const size = img.getAttribute('data-size');
            const created = img.getAttribute('data-created');
            const imageId = img.getAttribute('data-id');
            const hasCaption = img.getAttribute('data-has-caption') === 'true';
            const hasTags = img.getAttribute('data-has-tags') === 'true';
            const collectionName = img.getAttribute('data-collection');
            
            if (imageUrl && modalImage) modalImage.src = imageUrl;
            if (filename && modalFilename) modalFilename.textContent = filename;
            if (size && modalSize) modalSize.textContent = formatFileSize(parseInt(size));
            if (created && modalDate) modalDate.textContent = formatDate(created);
            if (imageId) currentImageId = imageId;

            // Update caption status
            const statusDot = document.querySelector('#caption-status .w-2');
            const statusText = document.querySelector('#caption-status span:last-child');
            if (statusDot && statusText) {
                statusDot.className = `w-2 h-2 rounded-full ${hasCaption ? 'bg-green-500' : 'bg-red-500'}`;
                statusText.textContent = hasCaption ? 'Has Caption' : 'No Caption';
            }

            // If caption modal is open, update it with the new image's caption
            const captionModal = document.getElementById('caption-modal');
            if (captionModal && !captionModal.classList.contains('hidden') && imageId) {
                (window as any).openCaptionModal(imageId);
            }

            // If we're at the last image and trying to go next, trigger loading more
            if (direction === 'next' && currentImageIndex === imageElements.length - 1 && !isLoadingMore) {
                isLoadingMore = true;
                try {
                    // Call the global loadMoreImages function from Gallery
                    if (window.loadMoreImages) {
                        await window.loadMoreImages();
                        // Update our elements list with newly loaded images
                        imageElements = Array.from(document.querySelectorAll('img[data-filename]')) as HTMLImageElement[];
                        // If we successfully loaded more images, navigate to the next one
                        if (currentImageIndex < imageElements.length - 1) {
                            navigateImage('next');
                        }
                    }
                } finally {
                    isLoadingMore = false;
                }
            }
        }
    }

    async function openModal(
        imageUrl: string,
        filename: string,
        size: string,
        created: string,
        imageId: string,
        hasCaption: boolean,
        hasTags: boolean,
        collectionName: string
    ) {
        if (!modal || !modalImage || !modalFilename || !modalSize || !modalDate) return;
        
        currentImageId = imageId;
        
        // Update image elements list
        imageElements = Array.from(document.querySelectorAll('img[data-filename]')) as HTMLImageElement[];
        
        // Find the image that matches this URL
        const img = imageElements.find(img => img.src === imageUrl);
        
        if (img) {
            currentImageIndex = imageElements.indexOf(img);
        }
        
        modalImage.src = imageUrl;
        modalFilename.textContent = filename;
        modalSize.textContent = formatFileSize(parseInt(size));
        modalDate.textContent = formatDate(created);
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';

        // Update caption status
        const statusDot = document.querySelector('#caption-status .w-2');
        const statusText = document.querySelector('#caption-status span:last-child');
        if (statusDot && statusText) {
            statusDot.className = `w-2 h-2 rounded-full ${hasCaption ? 'bg-green-500' : 'bg-red-500'}`;
            statusText.textContent = hasCaption ? 'Has Caption' : 'No Caption';
        }
    }

    function closeModal() {
        if (!modal) return;
        modal.classList.add('hidden');
        document.body.style.overflow = '';
    }

    // Initialize modal elements
    document.addEventListener('DOMContentLoaded', () => {
        modal = document.getElementById('modal');
        modalImage = document.getElementById('modal-image') as HTMLImageElement;
        modalFilename = document.getElementById('modal-filename');
        modalSize = document.getElementById('modal-size');
        modalDate = document.getElementById('modal-date');
        captionButton = document.getElementById('caption-button');

        // Get all image elements
        imageElements = Array.from(document.querySelectorAll('img[data-filename]')) as HTMLImageElement[];

        // Close modal when clicking outside the image
        modal?.addEventListener('click', (e) => {
            const target = e.target as HTMLElement;
            if (target.id === 'modal-background') {
                closeModal();
            }
        });

        // Caption button click handler
        captionButton?.addEventListener('click', () => {
            if (currentImageId) {
                (window as any).openCaptionModal(currentImageId);
            }
        });

        // Add keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                // Check if caption modal is open
                const captionModal = document.getElementById('caption-modal');
                if (captionModal && !captionModal.classList.contains('hidden')) {
                    // Only close caption modal
                    captionModal.classList.add('hidden');
                    return;
                }
                
                // If main modal is open, close it
                if (modal && !modal.classList.contains('hidden')) {
                    closeModal();
                }
                return;
            }

            // Only handle other keys if main modal is open
            if (modal?.classList.contains('hidden')) return;
            
            // Don't handle shortcuts if we're typing in the caption textarea
            const activeElement = document.activeElement;
            if (activeElement?.id === 'caption-text') return;
            
            switch (e.key) {
                case 'ArrowLeft':
                    navigateImage('prev');
                    break;
                case 'ArrowRight':
                    navigateImage('next');
                    break;
                case 'c':
                    // Open caption modal if main modal is open
                    if (currentImageId) {
                        (window as any).openCaptionModal(currentImageId);
                    }
                    break;
            }
        });
    });

    // Make openModal available globally
    (window as any).openModal = openModal;
</script> 