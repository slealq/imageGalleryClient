---
import CaptionModal from './CaptionModal.astro';
import CropModal from './CropModal.astro';

interface Props {
    imageUrl?: string;
}

// Add TypeScript interface for window
declare global {
    interface Window {
        openModal: (
            imageUrl: string,
            filename: string,
            size: string,
            created: string,
            imageId: string,
            hasCaption: boolean,
            hasTags: boolean,
            collectionName: string
        ) => void;
        openDrawer?: () => void;
    }
}
---

<div id="fullscreen-modal" class="fixed inset-0 bg-black/90 hidden z-50 flex items-center justify-center">
    <div class="relative w-full h-full flex flex-col">
        <div id="modal-background" class="flex-1 flex items-center justify-center p-4 pb-20">
            <div class="relative">
                <img id="modal-image" src="" alt="" class="max-w-[95vw] max-h-[95vh] w-auto h-auto object-contain" />
                <button 
                    id="modal-selection-button"
                    class="absolute top-4 right-4 w-8 h-8 rounded-full border-2 border-white bg-black/50 hover:bg-black/70 transition-colors z-10"
                    data-id=""
                >
                    <svg class="w-full h-full text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                </button>
            </div>
        </div>
        <div id="modal-footer" class="absolute bottom-0 left-0 right-0 bg-black/50 backdrop-blur-sm p-4 text-white text-sm">
            <div class="container mx-auto">
                <div class="flex justify-between items-center mb-2">
                    <div class="flex flex-col">
                        <div id="modal-filename" class="font-medium"></div>
                        <div id="modal-collection" class="text-gray-300 text-sm"></div>
                    </div>
                    <div class="flex gap-4">
                        <div id="modal-size" class="text-gray-300"></div>
                        <div id="modal-created" class="text-gray-300"></div>
                    </div>
                </div>
                <div class="flex items-center gap-4">
                    <div id="caption-status" class="flex items-center gap-2">
                        <span class="w-2 h-2 rounded-full"></span>
                        <span class="text-sm">Caption Status</span>
                    </div>
                    <button id="modal-caption-button" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-sm font-medium transition-colors cursor-pointer">
                        Manage Caption
                    </button>

                    <div id="crop-status" class="flex items-center gap-2">
                        <span class="w-2 h-2 rounded-full"></span>
                        <span class="text-sm">Crop Status</span>
                    </div>
                    <button id="modal-crop-button" class="px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded-lg text-sm font-medium transition-colors cursor-pointer">
                        Crop Image
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<CaptionModal imageId="" />
<CropModal imageId="" />

<script>
    import { ImageManager, ImageWrapper } from '../utils/ImageManager';

    class FullscreenHandler {
        private modal: HTMLElement | null = null;
        private modalImage: HTMLImageElement | null = null;
        private modalFilename: HTMLElement | null = null;
        private modalSize: HTMLElement | null = null;
        private modalCreated: HTMLElement | null = null;
        private modalCollection: HTMLElement | null = null;
        private captionButton: HTMLElement | null = null;
        private cropButton: HTMLElement | null = null;
        private selectionButton: HTMLElement | null = null;
        private imageElements: HTMLImageElement[] = [];
        private currentImageIndex: number = -1;
        private isLoadingMore: boolean = false;
        private currentImageId: string | null = null;
        private imageManager: ImageManager;
        private isCaptionModalOpen: boolean = false;
        private isCropModalOpen: boolean = false;

        constructor() {
            this.imageManager = window.imageManager;
            this.initializeElements();
            this.setupEventListeners();
            this.exposeOpenModal();
            this.setupModalStateObservers();
        }

        private initializeElements(): void {
            this.modal = document.getElementById('fullscreen-modal');
            this.modalImage = document.getElementById('modal-image') as HTMLImageElement;
            this.modalFilename = document.getElementById('modal-filename');
            this.modalSize = document.getElementById('modal-size');
            this.modalCreated = document.getElementById('modal-created');
            this.modalCollection = document.getElementById('modal-collection');
            this.captionButton = document.getElementById('modal-caption-button');
            this.cropButton = document.getElementById('modal-crop-button');
            this.selectionButton = document.getElementById('modal-selection-button');
            this.imageElements = Array.from(document.querySelectorAll('img[data-filename]')) as HTMLImageElement[];
        }

        private setupModalStateObservers(): void {
            // Observe caption modal
            const captionModal = document.getElementById('caption-modal');
            if (captionModal) {
                const observer = new MutationObserver((mutations) => {
                    mutations.forEach((mutation) => {
                        if (mutation.attributeName === 'class') {
                            this.isCaptionModalOpen = !captionModal.classList.contains('hidden');
                        }
                    });
                });
                observer.observe(captionModal, { attributes: true });
            }

            // Observe crop modal
            const cropModal = document.getElementById('crop-modal');
            if (cropModal) {
                const observer = new MutationObserver((mutations) => {
                    mutations.forEach((mutation) => {
                        if (mutation.attributeName === 'class') {
                            this.isCropModalOpen = !cropModal.classList.contains('hidden');
                        }
                    });
                });
                observer.observe(cropModal, { attributes: true });
            }
        }

        private handleKeyDown(e: KeyboardEvent): void {
            // If any modal is open, only handle Escape key and arrow keys
            if (this.isCaptionModalOpen || this.isCropModalOpen) {
                if (e.key === 'Escape') {
                    this.closeModal();
                } else if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
                    // Always handle arrow keys for image navigation
                    e.preventDefault();
                    this.navigateImage(e.key === 'ArrowLeft' ? 'prev' : 'next');
                }
                return;
            }

            // Handle keyboard events when no modal is open
            switch (e.key) {
                case 'Escape':
                    console.log("Escape key press in fullscreen")
                    this.closeModal();
                    break;
                case 'ArrowLeft':
                    console.log("arrow left key press in fullscreen")
                    e.preventDefault();
                    this.navigateImage('prev');
                    break;
                case 'ArrowRight':
                    console.log("arrow right key press in fullscreen")
                    e.preventDefault();
                    this.navigateImage('next');
                    break;
                case 'c':
                    if (this.currentImageId) {
                        (window as any).openCaptionModal(this.currentImageId);
                    }
                    break;
                case 'r':
                    if (this.currentImageId) {
                        (window as any).openCropModal(this.currentImageId);
                    }
                    break;
            }
        }

        private setupEventListeners(): void {
            // Modal background click
            this.modal?.addEventListener('click', (e) => {
                const target = e.target as HTMLElement;
                if (target.id === 'modal-background') {
                    this.closeModal();
                }
            });

            // Keyboard navigation
            document.addEventListener('keydown', this.handleKeyDown.bind(this));

            // Button handlers
            this.cropButton?.addEventListener('click', () => {
                if (this.currentImageId) {
                    (window as any).openCropModal(this.currentImageId);
                }
            });

            this.captionButton?.addEventListener('click', () => {
                if (this.currentImageId) {
                    (window as any).openCaptionModal(this.currentImageId);
                }
            });

            this.selectionButton?.addEventListener('click', this.handleSelectionClick.bind(this));
        }

        private handleSelectionClick(e: Event): void {
            e.stopPropagation();
            if (!this.currentImageId) return;

            const image = this.imageManager.getImage(this.currentImageId);
            if (image) {
                const selected = !image.isSelected();
                image.setSelected(selected);
                this.updateSelectionButton(selected);

                // Update gallery button if it exists
                const galleryButton = document.querySelector(`[data-id="${this.currentImageId}"] button`);
                if (galleryButton) {
                    galleryButton.classList.toggle('bg-green-500', selected);
                    galleryButton.classList.toggle('bg-black/50', !selected);
                    const checkmark = galleryButton.querySelector('svg');
                    if (checkmark) {
                        checkmark.classList.toggle('hidden', !selected);
                    }
                }
            }
        }

        private updateSelectionButton(selected: boolean): void {
            if (this.selectionButton) {
                this.selectionButton.classList.toggle('bg-green-500', selected);
                this.selectionButton.classList.toggle('bg-black/50', !selected);
                const checkmark = this.selectionButton.querySelector('svg');
                if (checkmark) {
                    checkmark.classList.toggle('hidden', !selected);
                }
            }
        }

        private updateStatuses(imageId: string): void {
            const image = this.imageManager.getImage(imageId);
            if (!image) return;

            // Update caption status
            const captionStatusDot = document.querySelector('#caption-status .w-2');
            const captionStatusText = document.querySelector('#caption-status span:last-child');
            if (captionStatusDot && captionStatusText) {
                const hasCaption = image.getMetadata()?.has_caption || false;
                captionStatusDot.className = `w-2 h-2 rounded-full ${hasCaption ? 'bg-green-500' : 'bg-red-500'}`;
                captionStatusText.textContent = hasCaption ? 'Has Caption' : 'No Caption';
            }

            // Update crop status
            const cropStatusDot = document.querySelector('#crop-status .w-2');
            const cropStatusText = document.querySelector('#crop-status span:last-child');
            if (cropStatusDot && cropStatusText) {
                const hasCrop = image.getMetadata()?.has_crop || false;
                cropStatusDot.className = `w-2 h-2 rounded-full ${hasCrop ? 'bg-green-500' : 'bg-red-500'}`;
                cropStatusText.textContent = hasCrop ? 'Has Crop' : 'No Crop';
            }
        }

        private async navigateImage(direction: 'next' | 'prev'): Promise<void> {
            console.log('navigateImage called:', { direction, currentImageId: this.currentImageId });
            
            if (!this.currentImageId) {
                console.log('No current image ID, returning');
                return;
            }

            const nextImage = direction === 'next' 
                ? this.imageManager.getNextImage(this.currentImageId)
                : this.imageManager.getPreviousImage(this.currentImageId);
            
            console.log('Next image result:', { 
                found: nextImage,
                nextImageId: nextImage?.getId(),
                nextImageFilename: nextImage?.getFilename()
            });

            if (!nextImage) {
                console.log('No next image found, checking if we should load more');
                // If we're at the end and trying to go next, try to load more
                if (direction === 'next' && !this.isLoadingMore) {
                    console.log('Attempting to load more images');
                    this.isLoadingMore = true;
                    try {
                        if (window.loadMoreImages) {
                            const success = await window.loadMoreImages();
                            console.log('Load more result:', { success });
                            if (success) {
                                // Try navigation again after loading more
                                const newNextImage = this.imageManager.getNextImage(this.currentImageId);
                                console.log('After loading more:', {
                                    found: !!newNextImage,
                                    newNextImageId: newNextImage?.getId(),
                                    newNextImageFilename: newNextImage?.getFilename(),
                                    currentSequence: this.imageManager.getImageSequence(),
                                    currentIndex: this.imageManager.getImageIndex(this.currentImageId)
                                });
                                if (newNextImage) {
                                    this.updateModalContent(newNextImage);
                                } else {
                                    console.log('Still no next image after loading more. Current sequence:', {
                                        sequence: this.imageManager.getImageSequence(),
                                        currentId: this.currentImageId,
                                        currentIndex: this.imageManager.getImageIndex(this.currentImageId)
                                    });
                                }
                            }
                        }
                    } finally {
                        this.isLoadingMore = false;
                    }
                }
                return;
            }

            console.log('Updating modal content with next image');
            this.updateModalContent(nextImage);
        }

        private updateModalContent(image: ImageWrapper): void {
            this.currentImageId = image.getId();
            
            if (this.modalImage) {
                this.modalImage.src = image.getUrl();
            }
            if (this.modalFilename) this.modalFilename.textContent = image.getFilename();
            if (this.modalSize) this.modalSize.textContent = this.formatFileSize(image.getSize());
            if (this.modalCreated) this.modalCreated.textContent = this.formatDate(image.getCreated());
            if (this.modalCollection) this.modalCollection.textContent = image.getMetadata().collection_name || '';

            // Update selection button state from ImageManager
            this.updateSelectionButton(image.isSelected());

            this.updateStatuses(image.getId());

            // If caption modal is open, update it with the new image's caption
            const captionModal = document.getElementById('caption-modal');
            if (captionModal && !captionModal.classList.contains('hidden')) {
                (window as any).openCaptionModal(image.getId());
            }
        }

        private formatFileSize(bytes: number): string {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        private formatDate(dateString: string): string {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        private closeModal(): void {
            if (this.modal) {
                this.modal.classList.add('hidden');
                document.body.style.overflow = '';
                window.dispatchEvent(new Event('modalClosed'));
            }
        }

        public openModal(
            imageUrl: string,
            filename: string,
            size: string,
            created: string,
            imageId: string,
            hasCaption: boolean,
            hasTags: boolean,
            collectionName: string
        ): void {
            this.currentImageId = imageId;
            
            if (this.modal && this.modalImage && this.modalFilename && this.modalSize && 
                this.modalCreated && this.modalCollection && this.captionButton && 
                this.cropButton && this.selectionButton) {
                
                this.modalImage.setAttribute('src', imageUrl);
                this.modalImage.setAttribute('data-filename', filename);
                this.modalImage.setAttribute('data-size', size);
                this.modalImage.setAttribute('data-created', created);
                this.modalImage.setAttribute('data-id', imageId);
                this.modalImage.setAttribute('data-has-caption', hasCaption.toString());
                this.modalImage.setAttribute('data-has-tags', hasTags.toString());
                this.modalImage.setAttribute('data-collection', collectionName);

                this.modalFilename.textContent = filename;
                this.modalSize.textContent = this.formatFileSize(parseInt(size));
                this.modalCreated.textContent = new Date(created).toLocaleString();
                this.modalCollection.textContent = collectionName;

                // Ensure buttons are always visible
                this.captionButton.classList.remove('hidden');
                this.cropButton.classList.remove('hidden');

                // Update selection button state
                const image = this.imageManager.getImage(imageId);
                if (image) {
                    this.updateSelectionButton(image.isSelected());
                }

                // Update statuses
                this.updateStatuses(imageId);

                this.modal.classList.remove('hidden');
                document.body.style.overflow = 'hidden';
            }
        }

        private exposeOpenModal(): void {
            if (typeof window !== 'undefined') {
                window.openModal = this.openModal.bind(this);
            }
        }
    }

    // Initialize the handler when the DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        new FullscreenHandler();
    });
</script> 